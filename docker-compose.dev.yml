version: '3.8'

services:
  # TBK Development Application
  tbk-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: tbk-dev
    ports:
      - "${DEV_PORT:-3001}:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=${DB_HOST:-60.205.0.185}
      - DB_USER=${DB_USER:-peach_wiki}
      - DB_PASSWORD=${DB_PASSWORD:-han0419/}
      - DB_NAME=${DB_NAME:-peach_wiki}
      - DB_PORT=${DB_PORT:-3306}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:8080}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
    volumes:
      # Mount source code for hot reload in development
      - .:/usr/src/app
      - /usr/src/app/node_modules
      # Mount logs directory
      - ./logs:/usr/src/app/logs
    networks:
      - tbk-dev-network
    depends_on:
      - mysql-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MySQL Development Database
  mysql-dev:
    image: mysql:8.0
    container_name: mysql-dev
    ports:
      - "${MYSQL_PORT:-3307}:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-han0419/}
      MYSQL_DATABASE: ${DB_NAME:-tbk_dev}
      MYSQL_USER: ${DB_USER:-tbk_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-han0419/}
    volumes:
      - mysql_dev_data:/var/lib/mysql
      - ./sql:/docker-entrypoint-initdb.d
    networks:
      - tbk-dev-network
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis for Development (optional, for caching and sessions)
  redis-dev:
    image: redis:7-alpine
    container_name: redis-dev
    ports:
      - "${REDIS_PORT:-6380}:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - tbk-dev-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx for Development (optional, for reverse proxy)
  nginx-dev:
    image: nginx:alpine
    container_name: nginx-dev
    ports:
      - "${NGINX_PORT:-8081}:80"
    volumes:
      - ./nginx/dev.conf:/etc/nginx/conf.d/default.conf
    networks:
      - tbk-dev-network
    depends_on:
      - tbk-dev
    restart: unless-stopped
    profiles:
      - with-nginx

volumes:
  mysql_dev_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  tbk-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16