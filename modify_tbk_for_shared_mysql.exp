#!/usr/bin/expect -f

# 修改tbk项目配置以使用独立的MySQL容器
# 实现方案1：移除tbk-db服务，使用独立的tbk-mysql容器

set timeout 60
set server_ip "60.205.0.185"
set server_user "root"
set server_password "han0419/"

# 连接到远程服务器
spawn sshpass -p $server_password ssh -o StrictHostKeyChecking=no $server_user@$server_ip

expect {
    "*]#" {
        send_user "\n=== 已连接到远程服务器 ===\n"
    }
    timeout {
        send_user "\n连接服务器超时\n"
        exit 1
    }
}

# 进入tbk项目目录
send "cd /root/tbk\r"
expect "*]#"

# 检查当前目录内容
send_user "\n=== 检查当前tbk项目目录 ===\n"
send "ls -la\r"
expect "*]#"

# 查看原始配置文件
send_user "\n=== 查看原始docker-compose.yml ===\n"
send "cat docker-compose.yml\r"
expect "*]#"

# 备份原始docker-compose.yml
send_user "\n=== 备份原始配置文件 ===\n"
send "cp docker-compose.yml docker-compose.yml.backup.`date +%Y%m%d_%H%M%S`\r"
expect "*]#"

# 停止当前tbk服务
send_user "\n=== 停止当前tbk服务 ===\n"
send "docker compose down\r"
expect "*]#"

# 检查独立MySQL容器状态
send_user "\n=== 检查独立MySQL容器状态 ===\n"
send "docker ps | grep tbk-mysql\r"
expect "*]#"

# 测试连接到独立MySQL容器
send_user "\n=== 测试连接到独立MySQL容器 ===\n"
send "docker exec tbk-mysql mysql -u tbk_admin -pHan0419@MySQL -e 'SELECT 1 as test;'\r"
expect "*]#"

# 创建新的docker-compose.yml（移除tbk-db服务）
send_user "\n=== 创建新的docker-compose.yml配置 ===\n"
send "cat > docker-compose.yml << 'DOCKEREOF'\r"
expect "*>"

send "version: '3.8'\r"
expect "*>"

send "\r"
expect "*>"

send "services:\r"
expect "*>"

send "  tbk-app:\r"
expect "*>"

send "    build: .\r"
expect "*>"

send "    container_name: tbk-app\r"
expect "*>"

send "    restart: unless-stopped\r"
expect "*>"

send "    environment:\r"
expect "*>"

send "      - DB_HOST=60.205.0.185\r"
expect "*>"

send "      - DB_PORT=3306\r"
expect "*>"

send "      - DB_NAME=tbk\r"
expect "*>"

send "      - DB_USER=tbk_admin\r"
expect "*>"

send "      - DB_PASSWORD=Han0419@MySQL\r"
expect "*>"

send "    ports:\r"
expect "*>"

send "      - \"8080:8080\"\r"
expect "*>"

send "    networks:\r"
expect "*>"

send "      - tbk-network\r"
expect "*>"

send "\r"
expect "*>"

send "  tbk-nginx:\r"
expect "*>"

send "    image: nginx:alpine\r"
expect "*>"

send "    container_name: tbk-nginx\r"
expect "*>"

send "    restart: unless-stopped\r"
expect "*>"

send "    ports:\r"
expect "*>"

send "      - \"80:80\"\r"
expect "*>"

send "      - \"443:443\"\r"
expect "*>"

send "    volumes:\r"
expect "*>"

send "      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro\r"
expect "*>"

send "      - ./nginx/conf.d:/etc/nginx/conf.d:ro\r"
expect "*>"

send "      - ./nginx/ssl:/etc/nginx/ssl:ro\r"
expect "*>"

send "    networks:\r"
expect "*>"

send "      - tbk-network\r"
expect "*>"

send "\r"
expect "*>"

send "networks:\r"
expect "*>"

send "  tbk-network:\r"
expect "*>"

send "    driver: bridge\r"
expect "*>"

send "DOCKEREOF\r"
expect "*]#"

# 验证新配置文件
send_user "\n=== 验证新配置文件 ===\n"
send "cat docker-compose.yml\r"
expect "*]#"

# 启动修改后的tbk服务
send_user "\n=== 启动修改后的tbk服务 ===\n"
send "docker compose up -d\r"
expect "*]#"

# 等待服务启动
send "sleep 15\r"
expect "*]#"

# 检查服务状态
send_user "\n=== 检查服务状态 ===\n"
send "docker compose ps\r"
expect "*]#"

# 检查应用日志
send_user "\n=== 检查应用日志 ===\n"
send "docker compose logs tbk-app | tail -20\r"
expect "*]#"

# 检查网络连接
send_user "\n=== 检查网络连接 ===\n"
send "docker exec tbk-app ping -c 3 60.205.0.185 2>/dev/null || echo '网络连接测试完成'\r"
expect "*]#"

send_user "\n=== tbk项目配置修改完成 ===\n"
send_user "现在tbk-app将连接到独立的tbk-mysql容器(端口3306)\n"
send_user "tbk-db服务已被移除，避免了端口冲突\n"

# 退出
send "exit\r"
expect eof