#!/usr/bin/expect -f

# MySQL连接诊断脚本
set timeout 30
set server_ip "60.205.0.185"
set password "han0419/"

puts "=== MySQL连接状态诊断开始 ==="

# 连接到远程服务器
spawn ssh root@$server_ip
expect {
    "password:" {
        send "$password\r"
        exp_continue
    }
    "yes/no" {
        send "yes\r"
        exp_continue
    }
    "# " {
        puts "✅ SSH连接成功"
    }
    timeout {
        puts "❌ SSH连接超时"
        exit 1
    }
}

# 1. 检查MySQL容器状态
puts "\n=== 1. 检查MySQL容器状态 ==="
send "docker ps | grep docker-mysql\r"
expect "# "

# 2. 进入MySQL检查连接状态
puts "\n=== 2. 检查MySQL当前连接状态 ==="
send "docker exec -it docker-mysql mysql -uroot -p$password\r"
expect {
    "mysql>" {
        puts "✅ MySQL连接成功，开始诊断连接状态"
        
        # 查看当前连接数
        send "SHOW STATUS LIKE 'Threads_connected';\r"
        expect "mysql>"
        
        # 查看最大连接数
        send "SHOW VARIABLES LIKE 'max_connections';\r"
        expect "mysql>"
        
        # 查看当前所有连接
        send "SHOW PROCESSLIST;\r"
        expect "mysql>"
        
        # 查看连接统计信息
        send "SHOW STATUS LIKE '%connect%';\r"
        expect "mysql>"
        
        # 查看是否有长时间运行的查询
        send "SELECT ID, USER, HOST, DB, COMMAND, TIME, STATE, INFO FROM INFORMATION_SCHEMA.PROCESSLIST WHERE COMMAND != 'Sleep' OR TIME > 300;\r"
        expect "mysql>"
        
        # 查看所有连接详情
        send "SELECT ID, USER, HOST, DB, COMMAND, TIME, STATE FROM INFORMATION_SCHEMA.PROCESSLIST ORDER BY TIME DESC;\r"
        expect "mysql>"
        
        send "exit\r"
        expect "# "
    }
    "Access denied" {
        puts "❌ MySQL连接失败"
        exit 1
    }
    timeout {
        puts "❌ MySQL连接超时"
        exit 1
    }
}

# 3. 检查系统资源使用情况
puts "\n=== 3. 检查系统资源使用情况 ==="
send "docker stats docker-mysql --no-stream\r"
expect "# "

# 4. 检查MySQL错误日志
puts "\n=== 4. 检查MySQL错误日志（最近50行） ==="
send "docker logs docker-mysql --tail 50\r"
expect "# "

puts "\n=== 诊断完成 ==="
send "exit\r"
expect eof