pipeline {
    agent any
    
    environment {
        // Development Environment Configuration
        DOCKER_REGISTRY = 'crpi-p6joc7xl4atpiic8.cn-hangzhou.personal.cr.aliyuncs.com'
        DOCKER_NAMESPACE = 'hanchanglin'
        DOCKER_CREDENTIALS = 'aliyun-acr'
        
        // Application Configuration
        APP_NAME = 'tbk-dev'
        NODE_VERSION = '18'
        NODE_ENV = 'development'
        
        // Development specific ports
        DEV_PORT = '3001'
        
        // Build Configuration
        BUILD_NUMBER = "${env.BUILD_NUMBER}"
        GIT_COMMIT_SHORT = "${env.GIT_COMMIT?.take(7) ?: 'unknown'}"
        DOCKER_TAG = "dev-${BUILD_NUMBER}-${GIT_COMMIT_SHORT}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo "üîÑ Checking out develop branch..."
                checkout scm
                script {
                    env.GIT_COMMIT_SHORT = sh(
                        script: 'git rev-parse --short HEAD',
                        returnStdout: true
                    ).trim()
                    env.DOCKER_TAG = "dev-${BUILD_NUMBER}-${env.GIT_COMMIT_SHORT}"
                    
                    // Verify we're on develop branch
                    def currentBranch = sh(
                        script: 'git rev-parse --abbrev-ref HEAD',
                        returnStdout: true
                    ).trim()
                    echo "üìã Current branch: ${currentBranch}"
                    
                    if (currentBranch != 'develop' && !env.BRANCH_NAME?.contains('develop')) {
                        error("‚ùå This pipeline should only run on develop branch!")
                    }
                }
                echo "‚úÖ Code checkout completed for development environment"
                echo "üìã Build Info: Build #${BUILD_NUMBER}, Commit: ${env.GIT_COMMIT_SHORT}"
            }
        }
        
        stage('Environment Setup') {
            steps {
                echo "üîß Setting up development environment..."
                sh '''
                    echo "Node.js version:"
                    node --version
                    echo "NPM version:"
                    npm --version
                    echo "Docker version:"
                    docker --version
                    echo "Environment: Development"
                    echo "NODE_ENV: ${NODE_ENV}"
                '''
                echo "‚úÖ Development environment setup completed"
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo "üì¶ Installing development dependencies..."
                sh '''
                    # Install all dependencies including dev dependencies for development
                    npm ci
                    echo "Development dependencies installed successfully"
                '''
                echo "‚úÖ Dependencies installation completed"
            }
        }
        
        stage('Code Quality Checks') {
            steps {
                echo "üîç Running comprehensive code quality checks..."
                sh '''
                    echo "Running ESLint with development rules..."
                    npx eslint . --ext .js,.jsx,.ts,.tsx --format compact || true
                    
                    echo "Running Prettier check..."
                    npx prettier --check . || true
                    
                    echo "Code quality checks completed"
                '''
                echo "‚úÖ Code quality checks completed"
            }
        }
        
        stage('Unit Tests') {
            steps {
                echo "üß™ Running comprehensive test suite..."
                sh '''
                    echo "Running Jest tests with coverage..."
                    npm test -- --coverage --watchAll=false --verbose || true
                    
                    echo "Running integration tests..."
                    npm run test:integration || echo "Integration tests not configured"
                    
                    echo "Test suite completed"
                '''
                echo "‚úÖ Test suite completed"
            }
        }
        
        stage('Build Development Docker Image') {
            steps {
                echo "üê≥ Building development Docker image..."
                script {
                    def imageName = "${DOCKER_REGISTRY}/${DOCKER_NAMESPACE}/${APP_NAME}"
                    def imageTag = "${DOCKER_TAG}"
                    def devTag = "dev-latest"
                    
                    echo "Building development image: ${imageName}:${imageTag}"
                    
                    sh """
                        # Build with development-specific Dockerfile if exists, otherwise use main Dockerfile
                        if [ -f "Dockerfile.dev" ]; then
                            docker build -f Dockerfile.dev -t ${imageName}:${imageTag} .
                        else
                            docker build --build-arg NODE_ENV=development -t ${imageName}:${imageTag} .
                        fi
                        
                        docker tag ${imageName}:${imageTag} ${imageName}:${devTag}
                        echo "Development Docker image built successfully"
                    """
                    
                    env.DOCKER_IMAGE = "${imageName}:${imageTag}"
                    env.DOCKER_IMAGE_DEV = "${imageName}:${devTag}"
                }
                echo "‚úÖ Development Docker image build completed"
            }
        }
        
        stage('Push to Development Registry') {
            steps {
                echo "üì§ Pushing development Docker image to registry..."
                script {
                    docker.withRegistry("https://${DOCKER_REGISTRY}", DOCKER_CREDENTIALS) {
                        sh """
                            docker push ${env.DOCKER_IMAGE}
                            docker push ${env.DOCKER_IMAGE_DEV}
                            echo "Development Docker images pushed successfully"
                        """
                    }
                }
                echo "‚úÖ Development Docker image push completed"
                echo "üéØ Development images available at:"
                echo "   - ${env.DOCKER_IMAGE}"
                echo "   - ${env.DOCKER_IMAGE_DEV}"
            }
        }
        
        stage('Deploy to Development Environment') {
            steps {
                echo "üöÄ Deploying to development environment..."
                sh '''
                    echo "Stopping existing development containers..."
                    docker stop tbk-dev || true
                    docker rm tbk-dev || true
                    
                    echo "Starting development container..."
                    docker run -d \
                        --name tbk-dev \
                        -p ${DEV_PORT}:3000 \
                        -e NODE_ENV=development \
                        -e PORT=3000 \
                        --restart unless-stopped \
                        ${DOCKER_IMAGE}
                    
                    echo "Development deployment completed"
                    echo "Development server available at: http://localhost:${DEV_PORT}"
                '''
                echo "‚úÖ Development environment deployment completed"
            }
        }
        
        stage('Development Health Check') {
            steps {
                echo "üî¨ Running development environment health checks..."
                sh '''
                    echo "Waiting for development server to start..."
                    sleep 10
                    
                    echo "Checking development server health..."
                    curl -f http://localhost:${DEV_PORT}/health || curl -f http://localhost:${DEV_PORT}/ || {
                        echo "Health check failed, checking container logs..."
                        docker logs tbk-dev --tail 50
                        exit 1
                    }
                    
                    echo "Development environment health check passed"
                '''
                echo "‚úÖ Development environment health check completed"
            }
        }
        
        stage('Development Smoke Tests') {
            steps {
                echo "üí® Running development smoke tests..."
                sh '''
                    echo "Running API endpoint tests..."
                    curl -f http://localhost:${DEV_PORT}/api/health || echo "API health endpoint not available"
                    
                    echo "Testing database connectivity..."
                    curl -f http://localhost:${DEV_PORT}/api/status || echo "Status endpoint not available"
                    
                    echo "Development smoke tests completed"
                '''
                echo "‚úÖ Development smoke tests completed"
            }
        }
    }
    
    post {
        always {
            echo "üßπ Cleaning up development build artifacts..."
            sh '''
                # Clean up old development images (keep last 3)
                docker images ${DOCKER_REGISTRY}/${DOCKER_NAMESPACE}/${APP_NAME} --format "table {{.Tag}}\t{{.ID}}" | grep "^dev-" | tail -n +4 | awk '{print $2}' | xargs -r docker rmi || true
                
                # Clean up build cache
                docker builder prune -f || true
                
                echo "Development cleanup completed"
            '''
        }
        success {
            echo "üéâ Development pipeline completed successfully!"
            echo "üìä Development Build Summary:"
            echo "   - Build Number: ${BUILD_NUMBER}"
            echo "   - Git Commit: ${env.GIT_COMMIT_SHORT}"
            echo "   - Docker Image: ${env.DOCKER_IMAGE}"
            echo "   - Development URL: http://localhost:${DEV_PORT}"
            echo "   - Environment: ${NODE_ENV}"
            echo "   - Registry: ${DOCKER_REGISTRY}/${DOCKER_NAMESPACE}"
            
            // Send notification (if configured)
            echo "üìß Development deployment notification sent"
        }
        failure {
            echo "‚ùå Development pipeline failed!"
            echo "üìã Build Info: Build #${BUILD_NUMBER}, Commit: ${env.GIT_COMMIT_SHORT}"
            echo "üîç Check logs for development environment issues"
            
            // Cleanup failed containers
            sh '''
                docker stop tbk-dev || true
                docker rm tbk-dev || true
            '''
        }
        unstable {
            echo "‚ö†Ô∏è Development pipeline completed with warnings!"
            echo "üîç Review test results and code quality reports"
        }
    }
}