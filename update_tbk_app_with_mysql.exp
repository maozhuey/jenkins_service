#!/usr/bin/expect -f

# 设置超时时间
set timeout 30

# 连接到远程服务器
spawn sshpass -p han0419/ ssh -o StrictHostKeyChecking=no root@60.205.0.185

# 等待连接成功
expect {
    "*#" {
        puts "=== 已连接到远程服务器 ==="
    }
    timeout {
        puts "连接超时"
        exit 1
    }
}

# 进入tbk目录
send "cd /root/tbk\r"
expect "*#"

# 创建新的app.js文件
puts "=== 创建增强版app.js ==="
send "cat > app.js << 'APPJS_EOF'\r"
expect "*>"

send "const express = require('express');\r"
expect "*>"
send "const mysql = require('mysql2/promise');\r"
expect "*>"
send "const app = express();\r"
expect "*>"
send "const port = 8080;\r"
expect "*>"
send "\r"
expect "*>"
send "// 数据库配置\r"
expect "*>"
send "const dbConfig = {\r"
expect "*>"
send "  host: process.env.DB_HOST || 'localhost',\r"
expect "*>"
send "  port: process.env.DB_PORT || 3306,\r"
expect "*>"
send "  user: process.env.DB_USER || 'tbk_admin',\r"
expect "*>"
send "  password: process.env.DB_PASSWORD || 'Han0419@MySQL',\r"
expect "*>"
send "  database: process.env.DB_NAME || 'tbk'\r"
expect "*>"
send "};\r"
expect "*>"
send "\r"
expect "*>"
send "app.use(express.json());\r"
expect "*>"
send "\r"
expect "*>"
send "// 基本路由\r"
expect "*>"
send "app.get('/', (req, res) => {\r"
expect "*>"
send "  res.json({ \r"
expect "*>"
send "    message: 'TBK应用运行正常', \r"
expect "*>"
send "    timestamp: new Date(),\r"
expect "*>"
send "    database: dbConfig.host + ':' + dbConfig.port\r"
expect "*>"
send "  });\r"
expect "*>"
send "});\r"
expect "*>"
send "\r"
expect "*>"
send "// 健康检查\r"
expect "*>"
send "app.get('/health', (req, res) => {\r"
expect "*>"
send "  res.json({ status: 'OK' });\r"
expect "*>"
send "});\r"
expect "*>"
send "\r"
expect "*>"
send "// 数据库连接测试\r"
expect "*>"
send "app.get('/db-test', async (req, res) => {\r"
expect "*>"
send "  try {\r"
expect "*>"
send "    const connection = await mysql.createConnection(dbConfig);\r"
expect "*>"
send "    const result = await connection.execute('SELECT 1 as test');\r"
expect "*>"
send "    const rows = result\\[0\\];\r"
expect "*>"
send "    await connection.end();\r"
expect "*>"
send "    res.json({ \r"
expect "*>"
send "      status: 'success', \r"
expect "*>"
send "      message: '数据库连接成功',\r"
expect "*>"
send "      data: rows\r"
expect "*>"
send "    });\r"
expect "*>"
send "  } catch (error) {\r"
expect "*>"
send "    res.status(500).json({ \r"
expect "*>"
send "      status: 'error', \r"
expect "*>"
send "      message: '数据库连接失败',\r"
expect "*>"
send "      error: error.message\r"
expect "*>"
send "    });\r"
expect "*>"
send "  }\r"
expect "*>"
send "});\r"
expect "*>"
send "\r"
expect "*>"
send "// 获取分类列表\r"
expect "*>"
send "app.get('/categories', async (req, res) => {\r"
expect "*>"
send "  try {\r"
expect "*>"
send "    const connection = await mysql.createConnection(dbConfig);\r"
expect "*>"
send "    const result = await connection.execute('SELECT * FROM categories');\r"
expect "*>"
send "    const rows = result\\[0\\];\r"
expect "*>"
send "    await connection.end();\r"
expect "*>"
send "    res.json({ \r"
expect "*>"
send "      status: 'success', \r"
expect "*>"
send "      data: rows\r"
expect "*>"
send "    });\r"
expect "*>"
send "  } catch (error) {\r"
expect "*>"
send "    res.status(500).json({ \r"
expect "*>"
send "      status: 'error', \r"
expect "*>"
send "      message: '获取分类失败',\r"
expect "*>"
send "      error: error.message\r"
expect "*>"
send "    });\r"
expect "*>"
send "  }\r"
expect "*>"
send "});\r"
expect "*>"
send "\r"
expect "*>"
send "// 获取文章列表\r"
expect "*>"
send "app.get('/articles', async (req, res) => {\r"
expect "*>"
send "  try {\r"
expect "*>"
send "    const connection = await mysql.createConnection(dbConfig);\r"
expect "*>"
send "    const result = await connection.execute('SELECT * FROM articles');\r"
expect "*>"
send "    const rows = result\\[0\\];\r"
expect "*>"
send "    await connection.end();\r"
expect "*>"
send "    res.json({ \r"
expect "*>"
send "      status: 'success', \r"
expect "*>"
send "      data: rows\r"
expect "*>"
send "    });\r"
expect "*>"
send "  } catch (error) {\r"
expect "*>"
send "    res.status(500).json({ \r"
expect "*>"
send "      status: 'error', \r"
expect "*>"
send "      message: '获取文章失败',\r"
expect "*>"
send "      error: error.message\r"
expect "*>"
send "    });\r"
expect "*>"
send "  }\r"
expect "*>"
send "});\r"
expect "*>"
send "\r"
expect "*>"
send "app.listen(port, () => {\r"
expect "*>"
send "  console.log(\\`TBK应用运行在端口 \\${port}\\`);\r"
expect "*>"
send "});\r"
expect "*>"
send "APPJS_EOF\r"
expect "*#"

puts "=== 重新构建和启动tbk服务 ==="
send "docker compose down\r"
expect "*#"

send "docker compose up -d --build\r"
expect "*#"

puts "=== 等待服务启动 ==="
send "sleep 15\r"
expect "*#"

puts "=== 检查服务状态 ==="
send "docker compose ps\r"
expect "*#"

puts "=== 测试数据库连接 ==="
send "curl -s http://localhost:8081/db-test\r"
expect "*#"

puts "=== 测试分类接口 ==="
send "curl -s http://localhost:8081/categories\r"
expect "*#"

puts "=== 测试文章接口 ==="
send "curl -s http://localhost:8081/articles\r"
expect "*#"

puts "=== TBK应用MySQL连接测试完成 ==="
exit